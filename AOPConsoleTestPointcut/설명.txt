*** 콘솔 프로젝트 실습하기 
	- Pointcut과 Advice의 관계를 알아봤으니 이번엔 Pointcut에 대해 자세하게 알아본다.
	- Pointcut에 관련된 여러가지 요소들을 실습한다.

	a. 프로젝트 생성하기
		New > Other > Spring Legacy Project > Simple Spring Maven > "AOPConsoleTestPointcut"
	b. pom.xml 의존 파일 설정하기
		기존 <dependency>는 모두 삭제하고 아래의 <dependency> 추가하기 
		- spring-core
		- spring-context
		- spring-aop
		- aspectjweave
	c. 파일 생성하기
		- 파일을 생성하고 코드를 작성
		1. src/main/java > com.test.pointcut > ICore 인터페이스 생성
		2. src/main/java > com.test.pointcut > Core 클래스 생성 (주 업무 담당, 서비스 객체)
		3. src/main/java > com.test.pointcut > MainTest 클래스 생성 (메인 클래스)
		4. src/main/java > com.test.pointcut > Cross 클래스 생성 (보조 업무 담당)
		5. src/main/resources > main.xml 생성
	d. 실행
		- MainTest.main() 실행하기

[pom.xml] - 이전 프로젝트와 동일

<dependencies>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>4.3.1.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>4.0.4.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aop</artifactId>
		<version>4.0.4.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjweaver</artifactId>
		<version>1.7.4</version>
	</dependency>
</dependencies>	


[ICore.java]

public interface ICore {

	//주업무
	void m1();
	void m2();

}


[Core.java]

public class Core implements ICore {

	@Override //주업무
	public void m1() {

		System.out.println("주업무");	

	}

	@Override //주업무
	public void m2() {

		System.out.println("주업무2");	

	}
	
}


[Cross.java]

@Aspect
public class Cross {

	//아직 보조업무 미구현
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		ApplicationContext context = new GenericXmlApplicationContext("classpath:main.xml");

		ICore core = context.getBean("core", ICore.class);
		
		core.m1();
		core.m2();

	}
	
}


[main.xml]

<aop:aspectj-autoproxy />	

<bean id="core" class="com.test.pointcut.Core"/>

<bean id="cross" class="com.test.pointcut.Cross"/>


{실행결과}

주업무
주업무2

일단 보조업무없이 주업무만 동작되는 기본 틀을 구현했다.



	e. Pointcut과 Advice와의 관계 개요
		- 반복되는 업무나 공통된 업무가 발생하면 여러 관계를 이용해 생산성을 높힐 수 있다.
		- f. 에서 관계별 예제가 나옴
	
execution(public void com.test.pointcut.Core.m1())             @Around("pc1()") 
public void pc1() { }	                                 -----	   public void arround() { }
                                                                        
1 : 1 관계
특정 Pointcut 1개에 특정 Advice 1개를 연결함
 pattern) Core.m1() ▷ Cross.arround() 실행



execution(public void com.test.pointcut.Core.m1())
public void pc1() { }	                                  -----	   @Around("pc1()")
                                                                           public void arround() { }

                                                                  -----	   @Before("pc1()")
                                                                           public void before() { }

                                                                  -----   @After("pc1()")
                                                                            public void after() { }
1 : N 관계
특정 Pointcut 1개에 여러 Advice를 연결함
 pattern) Core.m1() ▷ Cross.arround() 실행 + Cross.before() 실행 + Cross.after() 실행



execution(public void com.test.pointcut.Core.*())
public void pc1() { }	                                   -----    @Around("pc1()")
                                                                   -----    public void arround() { }
                                                                   -----    
                                                                             
N : 1 관계
Pointcut 여러개에 특정 Advice 1개를 연결함. Core클래스의 모든 메소드가 Pointcut이다.
Pointcut 정의는 1개이지만 와일드카드(*) 때문에 실제로는 수많은 메소드가 Pointcut이 된다.
 pattern) Core.m1() ▷ Cross.arround() 실행
 pattern) Core.m2() ▷ Cross.arround() 실행
 pattern) Core.m3() ▷ Cross.arround() 실행



execution(public void com.test.pointcut.Core.*())
public void pc1() { }	                                 -----     @Around("pc1()")
                                                                 -----     public void arround() { }
                                                                 -----	
                                                                         
                                                                 -----      @Before("pc1()")
                                                                 -----      public void before() { }
                                                                 -----	    

                                                                 -----      @After("pc1()")
                                                                 -----      public void after() { }
                                                                 -----	     

N : N 관계
Pointcut 여러개에 Advice 여러개를 연결함
 pattern) Core.m1() ▷ Cross.arround() 실행 + Cross.before() 실행 + Cross.after() 실행
 pattern) Core.m2() ▷ Cross.arround() 실행 + Cross.before() 실행 + Cross.after() 실행
 pattern) Core.m3() ▷ Cross.arround() 실행 + Cross.before() 실행 + Cross.after() 실행

>>>>>> 주업무와 보조업무를 전체적으로 잘 파악해서 관계를 잘 맺을것!! 잘모르겠다 싶으면 그냥 1 : 1


	f. Pointcut 선언 시 메소드 표현 방법 살펴보기 (AspectJ 표현식)
		- 스프링에서는 Join Point을 지정하기 위해서 Pointcut을 정의할때 AspectJ 표현식을 확장해서 사용한다.
		- Pointcut 선언은 execution, within, bean 명시자가 있다. 아래 설명은 execution 명시자를 사용한다.
		- execution([접근자지정자패턴] 리턴타입패턴 [패키지패턴]메소드이름패턴(파라미터패턴))
		- 와일드 카드(*) 사용이 가능하다.
		- .. 은 0또는 그 이상이란 표현이다.
		- 나머지는 자바 표현과 동일하다.

		ex) @Pointcut("execution(public void com.test.pointcut.Core.m1())")
			- 해당 패키지의 Core클래스의 m1() 이라는 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(void com.test.pointcut.Core.m1())")
			- public은 생략이 가능하다. (public이 아니면 Pointcut이 될수 없기 때문에..)
		ex) @Pointcut("execution(void Core.m1())")
			- 주업무 객체와 보조업무 객체가 같은 패키지면 패키지도 생략이 가능하다. 
		ex) @Pointcut("execution(void Core.*())")
			- Core클래스의 인자값이 없는 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(void Core.a*())")
			- Core클래스의 인자값이 없고, 이름이 a로 시작하는 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(void Core.*ing())")
			- Core클래스의 인자값이 없고, 이름이 ing로 끝나는 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(void Core.*(int))")
			- Core클래스의 인자값이 int 1개를 가지는 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(void Core.*(int,String))")
			- Core클래스의 인자값이 2개를(int, String) 가지는 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(void Core.m1(..))")
			- Core클래스의 인자값이 0개 이상이며, 이름이 m1인 모든 메소드를 Pointcut으로 지정한다.
			  (즉, 오버로딩된 모든 m1들이 Pointcut으로 설정된다.)
		ex) @Pointcut("execution(void Core.*(..))")
			- Core클래스의 인자값이 0개 이상인 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(int Core.*(..))")
			- Core클래스의 반환값이 int이며 인자값이 0개 이상인 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(* Core.*(..))")
			- Core클래스의 반환값이 어느것이든 상관없으며, 인자값이 0개 이상인 모든 메소드를 Pointcut으로 지정한다.
		ex) @Pointcut("execution(* com.test.aop..*(..))")
			- com.test.aop 패키지 이하의 모든 클래스가 가지는 메소드를 Pointcut으로 지정한다.

>>>>>> 다양한 Pointcut 지정을 통해 최소한의 코드로 Advice 연결이 가능하다.


	g. 1 : 1 관계 선언하기		
		- 특정 주업무 Pointcut과 특정 Advice 연결하기
		1. Cross.java 내용 추가하기
	
[Cross.java]

@Aspect
public class Cross {
			
	//Pointcut 설정하기	
	// - 딱 정해진 주업무만을 지정해서 Pointcut을 생성한다.
	// - 단, Pointcut 메소드는 "target()"이라는 이름은 사용 불가능!! 예약어이다.
	@Pointcut("execution(public void com.test.pointcut.Core.m1())")
	public void pc1() { 
	}

	//보조업무 구현
	// - @Pointcut이 선언된 메소드의 이름을 참조한다.
	@Before("pc1()")
	public void before() {
		
		System.out.println("보조업무");
		
	}

}


{실행결과}

보조업무
주업무1
주업무2

>>>>>> 특정 Pointcut("m1()")에 특정 Advice("before()")를 연결 시켰기 때문에 주업무 m2()호출시에는 보조업무가 호출되지 않는다. 재사용이 필요없을 경우 그냥 이렇게 1 : 1 연결을 한다.


	h. 1 : N 관계 선언하기
		- 기존의 Pointcut에 새로운 보조업무 추가 연결하기
		1. Cross.java 내용 추가하기
	
[Cross.java]

@Aspect
public class Cross {
			
	..	
	
	//추가 보조업무 구현
	@After("pc1()") 
	public void after() {
		
		System.out.println("보조업무2");
		
	}
}


{실행결과}

보조업무
주업무1
보조업무2
주업무2

>>>>>> 기존에 정의해놓은 주업무 Pointcut에 새로운 보조업무 Advice를 연결한다. 
m1()에만 Pointcut을 정의해놨기 때문에 주업무1에는 보조업무1,2가 수반되지만 주업무2에는 보조업무가 적용되지 않음을 확인할 수 있다.


	i. N : 1 관계 선언하기
		- 여러개의 주업무에 동일한 보조업무를 적용한다.
		1. ICore.java 내용 추가하기
		2. Core.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Cross.java 내용 추가하기
	
[ICore.java]

public interface ICore {

	..

	//주업무 추가하기
	void n1();
	void n2();
	void n3();
}


[Core.java]

public class Core implements ICore {

	..

	@Override
	public void n1() {
		
		System.out.println("주업무A");	
		
	}

	@Override
	public void n2() {
		
		System.out.println("주업무B");
		
	}

	@Override
	public void n3() {
		
		System.out.println("주업무C");
		
	}
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {
		
		..
		
		core.n1();
		core.n2();
		core.n3();
		
	}
	
}


[Cross.java]

@Aspect
public class Cross {
			
	..	
	
	//새로운 주업무 Pointcut을 생성한다.
	//단, 여러 메소드가 선택될 수 있도록 표현식을 작성한다. (N : 1)
	//n으로 시작하는 메소드명을 모두 Pointcut으로 선언한다.
	@Pointcut("execution(public void com.test.pointcut.Core.n*())")
	public void pc2() { 
	}
	
	//pc2() Pointcut에 1개의 보조업무를 연결한다.
	//결국 Core.n1(), Core.n2(), Core.n3() 주업무에 대해서 
	//before2() Advice 보조업무가 매번 동일하게 호출된다.
	@Before("pc2()") 
	public void before2() {
		
		System.out.println("여러 Pointcut에 동일한 보조업무 적용");
		
	}
	
}


{실행결과}

여러 Pointcut에 동일한 보조업무 적용
주업무A
여러 Pointcut에 동일한 보조업무 적용
주업무B
여러 Pointcut에 동일한 보조업무 적용
주업무C

>>>>>> 여러개의 주업무에 동일하게 반복되는 보조업무가 적용되는 것을 확인할 수 있다. 
인증 처리, 로그 기록 등 자주 반복되는 패턴의 업무가 이 형태에 속한다.


	j. N : N 관계 선언하기
		- Pointcut 여러개에 Advice 여러개를 적용한다.
		- 주업무 o1() : 보조업무(o1advice1(), o1advice2())
		- 주업무(o1(), o2(), o3()) : 보조업무(osBefore())
		1. ICore.java 내용 추가하기
		2. Core.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Cross.java 내용 추가하기
	
[ICore.java]

public interface ICore {

	..

	//주업무 추가하기
	void o1();
	void o2();
	void o3();
}


[Core.java]

public class Core implements ICore {

	..

	@Override
	public void o1() {
		
		System.out.println("주업무 가");
		
	}

	@Override
	public void o2() {
		
		System.out.println("주업무 나");
		
	}

	@Override
	public void o3() {
		
		System.out.println("주업무 다");
		
	}
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {
		
		..
		
		core.o1();
		core.o2();
		core.o3();
		
	}
	
}


[Cross.java]

@Aspect
public class Cross {
			
	..	
	
	//1 역할의 Pointcut 선언하기
	@Pointcut("execution(public void com.test.pointcut.Core.o1())")
	public void o1() { 
	}
	
	//N 역할의 Pointcut 선언하기
	@Pointcut("execution(public void com.test.pointcut.Core.o*())")
	public void os() { 
	}

	//o1()에 대한 N 역할을 할 2개의 Advice( 선언하기
	@Before("o1()")
	public void o1advice1() {
		
		System.out.println("주업무 o1()의 Before()");
		
	}
	
	@After("o1()")
	public void o1advice2() {
		
		System.out.println("주업무 o1()의 After()");
		
	}
	
	//여러 주업무에 대한 1 역할의 Advice 선언하기
	@Before("os()")
	public void osBefore() {
		
		System.out.println("주업무 o1(), o2(), o3()의 Before()");
		
	}
	
}


{실행결과}

주업무 o1()의 Before()
주업무 o1(), o2(), o3()의 Before()
주업무 가
주업무 o1()의 After()
주업무 o1(), o2(), o3()의 Before()
주업무 나
주업무 o1(), o2(), o3()의 Before()
주업무 다

>>>>>>> 이런 복합적인 관계 설정도 가능하다. 하지만 복잡하다!! 되도록 피하자!!


	k. 독립적인 Pointcut 선언없이 Advice 연결하기
		- Pointcut 선언을 별도로 하지 않고 Advice에 직접 선언이 가능하다.
		1. ICore.java 내용 추가하기
		2. Core.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Cross.java 내용 추가하기

[ICore.java]

public interface ICore {

	..

	//주업무 추가하기
	void p1();
}


[Core.java]

public class Core implements ICore {

	..

	@Override
	public void p1() {
		
		System.out.println("주업무 ###");
		
	}
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {
		
		..
		
		core.p1();
		
	}
	
}


[Cross.java]

@Aspect
public class Cross {
			
	..	
	
	//Pointcut 선언을 따로 하지 않고 Advice 선언과 동시에 한다.
	@Before("execution(public void com.test.pointcut.Core.p1())")
	public void pBefore() {
		
		System.out.println("Pointcut 선언없이 직접 연결한 보조업무");
		
	}
	
}


{실행결과}

Pointcut없이 선언한 보조업무
주업무 ###

>>>>>> Pointcut을 재사용할 일이 없으면 간단하게 선언할 수 있다.