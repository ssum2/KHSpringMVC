=== AOP(Aspect Oriented Programming) ===

※ 설명 중 일부 주관적인 판단이 들어가 있습니다.


1. 개념 설명 
- (포인트) 주업무와 보조업무의 관계를 이해할것.
	
	AOP는 OOP를 대신하는 새로운 개념이 아니라, OOP를 더욱 OOP답게 사용할 수 있도록 도와주는 개념이다. 
	객체를 재사용함으로써 개발자들은 반복되는 코드의 양을 굉장히 많이 줄일수가 있었다. 
	그렇지만 객체의 재사용에도 불구하고 반복되는 코드를 없앨수는 없었는데, 
	예를 들어 로그, 권한 체크, 인증, 예외 처리 등 필수적으로 해야하기 때문에 소스에서 반복될 수 밖에 없는 부분도 있다. 
	AOP는 이러한 부분을 해결해준다. 
	기능을 비지니스 로직과 공통 모듈로 구분한 후에 개발자의 코드 밖에서 필요한 시점에 비지니스 로직에 삽입하여 실행되도록 한다. 
	    
	기존의 OOP 에서는 계정, 게시판, 계좌이체 라는 로직을 처리할 때, 모두 똑같이 권한,로깅, 트랜잭션을 처리해줘야한다. 
	따라서 모든 로직에 똑같은 코드가 반복적으로 삽입될 수 밖에 없다. 
	다시말해서, 기존의 프로그래밍에서는 각 객체별로 처리했던 것을 AOP에서는 각 관점별로 외부에서 접근을 하는것이 AOP의 핵심이다. 
	즉 개발자는 계정, 게시판, 계좌이체와 같은 기능을 만들고, 공통적인 관심을 처리하는 모듈을 분리해서 개발한 후, 
	필요한 시점에 자동으로 소스코드가 삽입되도록 하는것이다.
	
	ex ) 로그인 유무를 검사해야하는 클래스들이 있는데 이 클래스들이 아무런 연관이 없어도 목적이 동일한 경우 그 목적기능이 담겨있는 클래스를 상속받아 사용할 수 있게 삽입해줌(Spring container)


	a. AOP(Aspect Oriented Programming)
		⊙ 관점 지향 프로그래밍 
		⊙ 관심사의 분리 (Seperation of Concerns)
			- 공통모듈(보안인증, 트랜잭션, 로깅 처리)을 만든 후에 코드 밖에서 이 모듈을 비지니스 로직에 삽입하는 것이 바로 AOP 이다. 
		⊙ 코드 밖에서 설정 된다는 것이 핵심이다.
       
		관점(Aspect)
		-- 구현하고자 하는 횡단 관심사의 기능을 의미한다. 한개 이상의 Pointcut과 Advice의 조합으로 만들어진다.	  
		  
	b. Joinpoint
	  -- 관점(Aspect)를 삽입하여 Advice가 적용될 수 있는 위치를 말한다. 
	     
		 횡단 관심 모듈의 기능이 삽입되어 동작할 수 있는 실행 가능한 특정위치를 말한다.
		 예>  메소드가 호출되는 부분 또는 리턴되는 부분,
		       인스턴스가 만들어지는 지점,
		       예외가 던져지는 지점, 
		       클래스가 초기화 되는 곳 등이 대표적인 조인포인트가 된다.
		       각각의 조인포인트들은 그 안에 횡단 관심의 기능이 AOP에 의해 자동으로 추가되어져서
		       동작할 수 있는 후보지가 되는 것이다.

	c. Pointcut
	   -- Advice를 적용할 Joinpoint를 선별하는 과정 또는 그 기능을 정의한 모듈을 의미한다. 
	      패턴매칭을 이용하여 어느 Joinpoint를 사용할 것인지 결정한다.
	      즉, Joinpoint 를 어떠한 방법으로 잘라내어 어느시점에 사용할 것이냐? 이다.
		  
	      어떤 클래스의 어느 Joinpoint를 사용할 것인지를 결정하여 선택하는 것.
	   AOP 에서는 Pointcut을 수행할 수 있는 다양한 접근방법을 제공한다.
	   Aspect 에서는 와일드카드를 이용한 메소드 시그니처를 사용한다.
	   주 업무가 시작하기 전에 보조업무가 무엇인지를 찾는 것

	d. Advice
	   -- 관점(Aspect)의 구현체로 Joinpoint에 삽입되어 동작하는 코드이다. 
          Advice는 Joinpoint와 결합하여 동작하는 시점에 따라 5개로 구분된다.

	e. Weaving (== Cross-cutting)
	   -- Pointcut에 의해서 결정된 Joinpoint에 지정된 Advice 를 삽입하는 과정.
          Weaving 은 AOP가 기존의 핵심 관심 모듈의 코드에 전혀 영향을 주지 않으면서
		    필요한 횡단 관심 기능을 추가할 수 있게 해주는 핵심적인 처리과정이다.
	      Weaving 을 처리하는 방법은 후처리기를 이용한 코드생성 기술 방법부터
	             특별한 컴파일러를 사용하는 것, 이미 생성된 클래스의 정적인 바이트코드의 변환 
	             또는 실행중 클래스로더를 통한 실시간 바이트코드 변환 그리고 다이내믹 프록시를 통한 방법까지 매우 다양하다.


2. Advice 종류
	- (포인트) 보조업무가 주업무와 어떤 순서로 서로 엮여서 실행되는지 이해하는 것이 중요함.

	a. Around Advice
	   --  조인포인트에서 메소드의 실행 이전, 이후, 예외발생등 모든 시점에서 실행되는 advice (개발자 마음대로 코딩 할 수 있음)

	b. Before Advice
       --  조인포인트에서 메소드가 실행되기전에 실행되는 advice

	c. After Advice
	   --  조인포인트에서 메소드의 실행결과에 상관없이 무조건 실행되는 advice(자바의 finally와 비슷한 역할임)

	d. After Returning Advice
       --  조인포인트에서 메소드가 성공적으로 실행된 후에 실행되는 advice

	e. After Throwing Advice
	   --  예외가 발생하였을 경우 실행되는 advice(자바의 catch 와 비슷한 역할임)

	
   Around Advice                Before Advice                After Advice           After Returning Advice       After Throwing Advice
------------------------------------------------------------------------------------------------------------------------------------------------
  	  	▼                        	▼                             ▼                             ▼                          ▼
Cross-cutting Concern     	Cross-cutting Concern        	Primary Concern				Primary Concern              Primary Concern
   Primary Concern             Primary Concern       	Cross-cutting Concern				▽ (결과값 전달)                	▽ (예외객체 전달)
Cross-cutting Concern                ▼                             ▼                    Cross-cutting Concern       Cross-cutting Concern
          ▼                                                                                      ▼                                ▼               



3. 콘솔 프로젝트 실습하기 [프로젝트 전체 소스 다운로드]
	- 주업무와 보조업무의 관계를 어떻게 설정하는지 알아본다. (Pointcut에 Advice를 설정하는 방법에 대해 알아본다.)
		ex. 주업무; Order / 보조업무; login 유무 --> 관심사(Aspect)
	- 위의 개념과 용어의 대한 정의를 이해한다고 가정하고 난 뒤 진행
	- 여러 Advice의 동작 순서와 상황을 이해하기 위한 예제
	- 이 예제는 주업무와 보조업무의 발생 순서만 잘 제어되는지를 확인함
	- 스프링은 AOP를 설정하기 위한 방법이 3가지가 있는데 그 중 XML 스키마 방식으로 프로젝트 진행함
	- 프로젝트 주제는 메모를 작성하는 콘솔 프로그램을 만든다고 가정
	- 메모 작업과 관련된 주업무에 각종 로그를 남기는 보조업무를 적용할 예정
	- 로그는 정리 시간 관계상 이클립스 콘솔에 남기기로 함
	- 처음 보조업무는 메모를 작성하는 데 소요되는 시간을 측정하는 업무를 구현함 (Around Advice)
	- 메모 작업은 AOP 설명을 위한 일부 업무만 구현 (나머지는 알아서..)
	- 프로젝트는 STS를 사용해서 구현함

	a. 프로젝트 생성하기
		New > Other > Spring Legacy Project > Simple Spring Maven > "AOPConsoleTest"
	b. pom.xml 의존 파일 설정하기
		기존 <dependency>는 모두 삭제하고 아래의 <dependency> 추가하기 
		- spring-core
		- spring-context
		- spring-aop
		- aspectjweaver
	c. 파일 생성하기
		- 파일을 생성하고 코드를 작성
		1. src/main/java > com.test.memo > IMemo 인터페이스 생성
		2. src/main/java > com.test.memo > Memo 클래스 생성 (주 업무 담당, 서비스 객체)
		3. src/main/java > com.test.memo > MainTest 클래스 생성 (메인 클래스)
		4. src/main/java > com.test.memo > Logger 클래스 생성 (보조 업무 담당)
		5. src/main/resources > memo.xml 생성 (AOP 설정 파일)
	d. 실행
		- MainTest.main() 실행하기

[업무 순서] 주업무(######) 보조업무(*******)
			▶   시간 기록 시작	메모 작성  	시간 기록 끝  ▶
*********************############*********************




[pom.xml] - Maven을 통한 의존 파일 관리

<dependencies>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>4.3.1.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>4.0.4.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aop</artifactId>
		<version>4.0.4.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjweaver</artifactId>
		<version>1.7.4</version>
	</dependency>
</dependencies>	



[IMemo.java] - 인터페이스 설계

public interface IMemo {

	//주업무 - 메모 작성하기
	void write(String memo);
}


[Memo.java] - 주업무를 구현하는 객체 (메모 업무)

public class Memo implements IMemo {

	@Override //주업무 - 메모 작성하기
	public void write(String memo) {

		System.out.println("메모 : " + memo);	

	}
}



[Logger.java] - 보조업무를 구현하는 객체 (로그 작성)

public class Logger {
	
	//보조업무
	// - 메모를 작성하는데 걸리는 시간을 로그에 남기는 보조업무
	public void arround(ProceedingJoinPoint  joinPoint) throws Throwable {
		
		//보조업무 시작
		long start = System.currentTimeMillis();
		System.out.println("시간 기록 시작");
		
		try {
			// 주업무 시작
			// - joinPoint.proceed(); 메소드를 실행함으로 
			//   Pointcut 에 설정된 주업무를 처리해주는 메소드가 호출되어 실행된다.
			//   지금은 public * com.test.memo.Memo.*(..) 이다. 
			
			joinPoint.proceed();  
			
			//   그리로 joinPoint.proceed() 메소드의 리턴값은 Object 이다.;
			//   이를통해 Aspect 로 연결된 Original Method(지금은 Memo 클래스의 모든 메소드임) 의 
			//   리턴값을 형변환을 통하여 받을수 있다.
			//   지금은 Original Method 의 리턴값이 void 임.
			// 주업무 끝
			
		} finally {
			
			long finish = System.currentTimeMillis();
			System.out.println("시간 기록 끝");
			System.out.println("주업무 실행시간 : " + (finish - start) + "ms");
			//보조업무 끝
			
		}

	}
	
}



[MainTest.java] - 메인 클래스 (테스트 시연용)

public class MainTest {

	public static void main(String[] args) {

		// IoC컨테이너(Spring컨테이너)로 사용되는 
		// ApplicationContext 객체 생성하기 
		// 이것은 XML 설정을 로드함으로써 생성할 수 있다. 
		ApplicationContext context = new GenericXmlApplicationContext("classpath:memo.xml");

		// 빈(bean) 객체 생성하기
		IMemo memo = context.getBean("memo", IMemo.class); 
		// memo.xml 파일에서 id 가 "memo"로 되어진 객체를 얻어옴.
		
		//메모 쓰기 (프록시 객체를 통한 주업무 호출)
		memo.write("스프링 공부하기");

	}
	
}


[memo.xml] - AOP를 설정하기 위한 파일 (주업무와 보조업무를 이곳에서 엮어준다.)

<!-- 주 업무 객체 -->
<bean id="memo" class="com.test.memo.Memo"/>

<!-- 보조 업무 객체 -->
<bean id="logger" class="com.test.memo.Logger"/>

<!-- Aspect 설정 -->
<aop:config>
	
	<!-- ref 속성으로 logger 객체(보조 업무 주체)를 참조	-->
	<aop:aspect id="loggerAdvice" ref="logger">
		
		<!-- 
			적용할 대상인 Pointcut 선언
			- 추후에 AspectJ 설명을 통해서 expression 표현을 설명할 예정
			- 일단 Memo 클래스내의 모든 메소드에 대해서 Advice를 적용하겠다는 뜻 
		-->
		<aop:pointcut 
			expression="execution(public * com.test.memo.Memo.*(..))" 
			id="m1"/>
			
		<!-- 
			Around Advice 적용
			- logger 객체의 arround 메소드를 m1이라는 Pointcut에 적용하겠다.
			- 즉, Memo.write() 메소드(m1)가 실행되면 Around Advice 방식으로 Logger.arround() 메서드를 적용시키겠다.. 라는 뜻
		-->
		<aop:around 
			method="arround"
			pointcut-ref="m1"/>
		
	</aop:aspect>
	
</aop:config>


{실행결과}

====================================
시간 기록 시작
메모 : 스프링 공부하기
시간 기록 끝
주업무 실행시간 : 0ms
====================================

>>>> 주업무와 보조업무가 정해진 순서대로(Around Advice) 진행되는 것을 확인할 수 있다.


	e. 이미 작성한 보조 업무가 다른 주업무에도 동일하게 적용되는지 확인하기
		- 메모 작성할 때 뿐만 아니라 메모 수정할 때에도 시간 기록을 로그로 남기고 싶다.
		- 주업무만 추가하고 보조업무는 건드릴 필요가 없다.
		1. IMemo.java 내용 추가하기
		2. Memo.java 내용 추가하기
		3. MainTest.java 내용 추가하기

[업무 순서] 주업무(######) 보조업무(*******)
▶   시간 기록 시작       메모 수정        시간 기록 끝    ▶
   *********************############********************



[IMemo.java]

public interface IMemo {

	..	

	//주업무 추가 - 메모 수정하기
	void edit(String memo); 

}


[Memo.java]

public class Memo implements IMemo {

	..

	@Override //주업무 추가 - 메모 수정하기
	public void edit(String memo) {
		
		System.out.println("메모 수정 : " + memo);
		
	}

}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		..
		
		//메모 수정 (주업무 추가)
		memo.edit("AOP 공부하기");

	}

}


{실행결과}

====================================
시간 기록 시작
메모 : 스프링 공부하기
시간 기록 끝
주업무 실행시간 : 1ms
====================================
====================================
시간 기록 시작
메모 수정: AOP 공부하기
시간 기록 끝
주업무 실행시간 : 0ms
====================================

>>>>>Pointcut이 Memo의 모든 메소드를 대상으로 하기 때문에 이미 만들어 놓은 Around Advice가 Memo.write()와 Memo.edit() 모두에게 적용된다. 
즉, 주업무 메소드가 Pointcut이 제시하는 형식만 만족하면 반복적인 추가 보조 업무 적용 작업이 필요없다.


	f. Before Advice 적용하기
		- 메모 작성(수정)하기 전에 해당 시간을 로그에 기록하는 보조 업무를 추가
		- 이번엔 새로운 Advice(보조업무)를 추가할 것이기 때문에 보조업무 객체를 편집
		1. Logger.java 내용 추가하기
		2. memo.xml 내용 추가하기

	
[업무 순서] 주업무(######) 보조업무(*******)
▶     시간 작성        메모 작성     ▶
    ****************#############

[Logger.java]

public class Logger {

	..
	
	// 보조업무 추가
	// - 메모를 작성하기 전 현재 시간을 로그에 남기는 보조업무
	public void before() {
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
		String now = sdf.format(new Date());
		
		System.out.println("   메모 작성 날짜시간 : " + now);
		
		//System.out.printf("메모 작성 시간 : %tT\n", Calendar.getInstance());
		
	}

}


[memo.xml]

..

<aop:config>

	<aop:aspect id="loggerAdvice" ref="logger">

		..

		<!-- 
			Before Advice 적용 
			- 동일한 Pointcut(메소드)에 적용할 것이라 pointcut-ref는 그대로 사용하고 Before Advice만 추가하면 된다. 
		-->
		<aop:before method="before" pointcut-ref="m1"/>

	</aop:aspect>

</aop:config>


{실행결과}

====================================
시간 기록 시작
   메모 작성 날짜시간 : 2016-09-02 17:34:31
메모 : 스프링 공부하기
시간 기록 끝
주업무 실행시간 : 2ms
====================================
====================================
시간 기록 시작
   메모 작성 날짜시간 : 2016-09-02 17:34:31
메모 수정: AOP 공부하기
시간 기록 끝
주업무 실행시간 : 0ms
====================================

>>>>>>동일한 Pointcut(Memo 클래스의 모든 메소드)에 이미 Around Advice가 적용되어 메모 작성(수정) 소요 시간을 기록하고 있는 상황에서 
추가로 Before Advice를 적용해 작성(수정) 날짜시각을 기록하는 보조 업무를 추가했다. 
그래서 메모 작성과 수정을 해보면 2개의 Advice가 동시에 발생하는 것을 확인할 수 있다.


	g. After Advice 적용하기
		- 메모 작성(수정) 후 편집 횟수를 로그에 기록하는 보조 업무를 추가
		- 새로운 Advice(보조업무)를 추가할 것이기 때문에 보조업무 객체를 편집
		- After Advice는 주업무 실행 중 예외 발생과 무관하게 항상 실행된다.
		1. Logger.java 내용 추가하기
		2. memo.xml 내용 추가하기
	
[업무 순서] 주업무(######) 보조업무(*******)
▶        메모 작성         편집횟수기록       ▶
      #############**********************   

[Logger.java]

public class Logger {

	..
	
	// 보조업무 추가
	// - 메모를 작성(수정)하면 편집 횟수를 누적해서 로그에 남기는 보조업무
	int cnt = 0;
	public void after() {
		
		cnt++;
		System.out.printf("메모 편집 횟수 : %d회\n", cnt);
		
	}

}


[memo.xml]

..

<aop:config>

	<aop:aspect id="loggerAdvice" ref="logger">

		..

		<!-- 
			After Advice 적용 
			- 동일한 Pointcut(메소드)에 적용할 것이라 After Advice만 추가하면 된다. 
		-->
		<aop:after method="after" pointcut-ref="m1"/>

	</aop:aspect>

</aop:config>


{실행결과}

====================================
시간 기록 시작
   메모 작성 날짜시간 : 2016-09-02 17:46:48
메모 : 스프링 공부하기
시간 기록 끝
주업무 실행시간 : 2ms
====================================
   메모 편집 횟수 : 1회
====================================
시간 기록 시작
   메모 작성 날짜시간 : 2016-09-02 17:46:48
메모 수정: AOP 공부하기
시간 기록 끝
주업무 실행시간 : 0ms
====================================
   메모 편집 횟수 : 2회


>>>>> Before Advice와 반대로 주업무가 완료되고 나서 보조업무가 실행된다.


	h. After Returning Advice 적용하기
		- 삭제한 메모 번호를 로그에 기록하는 보조 업무를 추가
		- After Returning Advice는 주업무 실행을 예외 발생없이 성공했을 때 실행된다.
		1. IMemo.java 내용 추가하기
		2. Memo.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Logger.java 내용 추가하기
		5. memo.xml 내용 추가하기


[업무 순서] 주업무(######) 보조업무(*******)
▶         메모 삭제           삭제한 메모 번호 기록    ▶
      ###############******************************   

[IMemo.java]

public interface IMemo {

	..

	//주업무 추가 - 메모 삭제하기
	int del(int seq);

}


[Memo.java]

public class Memo implements IMemo {

	..

	@Override //주업무 추가 - 메모 삭제하기
	public int del(int seq) {
		
		System.out.println(seq + "번 메모 삭제");
		
		return seq;
		
	}

}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		..

		//주업무 실행 - 메모 삭제하기
		memo.del(5);

	}

}


[Logger.java]

public class Logger {

	..
	
	//보조업무 추가
	// - 메모를 삭제한뒤 삭제한 메모의 번호를 로그에 남기는 보조업무
	// - 보조 객체의 인자명과 XML의 returning의 인자명이 동일해야 한다.
	public void afterreturning(Object seq) {
		
		System.out.println("삭제된 메모 번호 : " + seq);
		
	}

}


[memo.xml]

..

<aop:config>

	<aop:aspect id="loggerAdvice" ref="logger">

		..

		** 기존의 <aop:aournd> 태그는 삭제하고 테스트할것!!! 아래의 주의사항 읽어보고 확인할것~

		<!--  
			After Returning Advice 적용
		    - 주업무로 부터 반환받는 값을 명시한다. (returning="seq") 
		    - 보조 객체의 파라미터명과 returning의 파라미터명이 동일해야 한다.
		    - 주업무에서 생성된 데이터(결과값 등)를 보조업무에 넘겨서 연계해야 하는 경우에 사용되는 Advice 이다.
		      단!! Arround 와 After Returning 을 동시에 사용하면 After Returning 이 반환값을 받지 못하기 때문에 
		     Arround 는 반드시 제거하고서 After Returning 을 적용한다.
		-->
		<aop:after-returning 
			method="afterreturning"
			pointcut-ref="m1"
			returning="seq"/>

	</aop:aspect>

</aop:config>


{실행결과}

59번 메모 삭제
>>> 삭제된 메모 번호 : 59

>>>>>>주업무에서 생성된 데이터(결과값 등)를 보조업무에 넘겨 연계해야 하는 경우에 사용되는 Advice이다. 
단!! Around와 After Returning은 동시 사용하면 After Returing이 반환값을 받지 못하기 때문에 Around는 제거하고 
After Returing을 적용한다.


	i. After Throwing Advice 적용하기
		- 메모 읽기 중 예외가 발생하면 로그에 기록하는 보조 업무를 추가
		- 주로 예외에 관련된 기록(처리)만을 따로 관리하는 용도로 사용
		- After Throwing Advice는 주업무 실행 중 예외가 발생했을 때 실행된다.
		1. IMemo.java 내용 추가하기
		2. Memo.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Logger.java 내용 추가하기
		5. memo.xml 내용 추가하기

	[업무 순서] 주업무 보조업무
▶메모 읽기읽기 실패 기록▶

[업무 순서] 주업무(######) 보조업무(*******)
▶          메모 읽기            읽기 실패 기록    ▶
      ###############************************   

[IMemo.java]

public interface IMemo {

	..

	//주업무 추가 - 메모 읽기
	void read(int seq) throws Exception; //주업무 추가

}


[Memo.java]

public class Memo implements IMemo {

	..
	
	@Override
	public void read(int seq) throws Exception {
		
		if (seq < 1) {
			throw new Exception("번호 오류 " + seq);
		}
		
		System.out.println(seq + "번 메모 읽기");
		
	}

}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		..
		
		//메모 읽기
		try {
			memo.read(10);
			memo.read(-2);			
		} catch (Exception e) {
		}

	}

}


[Logger.java]

public class Logger {

	..

	//보조업무 추가
	// - 메모를 읽다가 예외가 발생하면 로그에 남기는 보조업무
	// - 보조 객체의 인자명과 XML의 throwing의 인자명이 동일해야 한다.
	public void afterthrowing(Exception e) {
		
		System.out.println("예외 기록 : " + e.getMessage());
		
	}

}


[memo.xml]

..

<aop:config>

	<aop:aspect id="loggerAdvice" ref="logger">

		..

		<!--  
			After Throwing Advice 적용
			- 주업무에서 예외가 발생하면 실행되는 보조업무
			- 보조 객체의 인자명과 throwing의 인자명이 동일해야 한다.
		-->
		<aop:after-throwing 
			method="afterthrowing"
			pointcut-ref="m1"
			throwing="e"/>

	</aop:aspect>

</aop:config>


{실행결과}

10번 메모 읽기
예외 기록 : 번호 오류 -2

>>>>>>예외가 발생했을 때 예외 처리를 하기 위한 보조업무가 아닌 예외와 관련된 보조업무를 하기 위한 Advice이다. 
예외 처리는 주업무 영역에서 해야 한다. (혼동하지 말것!!)