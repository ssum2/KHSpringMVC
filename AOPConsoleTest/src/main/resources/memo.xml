<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd">
<!-- 주 업무 객체 -->
<bean id="memo" class="com.test.memo.Memo"/>

<!-- 보조 업무 객체 -->
<bean id="logger" class="com.test.memo.Logger"/>

<!-- Aspect 설정 -->
<aop:config>
	<!-- ref 속성(reference; 참조)으로 logger 객체(보조 업무 주체)를 참조하여 관심사를 만듦-->
	<aop:aspect id="loggerAdvice" ref="logger">
		<!-- 
		적용할 대상인 Pointcut 선언
		- 추후에 AspectJ 설명을 통해서 expression 표현을 설명할 예정
		- 일단 Memo 클래스내의 모든 메소드에 대해서 Advice를 적용하겠다는 뜻 
		- execution(public * << 모든 리턴타입 com.test.memo.Memo.* << Memo클래스 내의 모든 메소드(.. << 모든 파라미터))
		- execution(public * com.test.memo.Memo.wr*<< wr로 시작하는 메소드 모두(String << String 타입의 파라미터만 가능))
		-->
		<aop:pointcut expression="execution(public * com.test.memo.Memo.*(..))" id="m1"/>
					
		<!-- #Around Advice 적용; 조인포인트에서 메소드의 실행 이전, 이후, 예외발생등 모든 시점에서 실행되는 advice (개발자 마음대로 코딩 할 수 있음)
			- logger 객체의 arround 메소드를 m1이라는 Pointcut에 적용하겠다.
			- 즉, Memo.write() 메소드(m1)가 실행되면 Around Advice 방식으로 Logger.arround() 메서드를 적용시키겠다.. 라는 뜻
		-->
		<!-- <aop:around method="arround" pointcut-ref="m1"/> -->
		
		
		<!-- #Before Advice 적용
 	         => 메모 작성(수정)하기 전에 해당 날짜시간을 로그에 기록하는 보조업무를 추가
 	         => 이번엔 새로운 Advice(보조업무)를 추가할 것이기 때문에 보조업무 객체를 편집.
 	          
 	         Before Advice 적용
 	         => 동일한 Pointcut(메소드)에 적용할 것이라서  pointcut-ref 는 그대로 사용하고
 	            Before Advice 만 추가하면 된다.  
 	    -->
 	    <!-- <aop:before method="before" pointcut-ref="m1"/> -->
 	    
 	    <!-- #After Advice 적용
 	          
 	         After Advice 적용
 	         => 동일한 Pointcut(메소드)에 적용할 것이라서  pointcut-ref 는 그대로 사용하고
 	            After Advice 만 추가하면 된다.  
 	    -->
 	    <!-- <aop:after method="after" pointcut-ref="m1"/> -->
 	    
 	    
	    <!-- After Returnig Advice 적용 
	         => 주업무로 부터 반환받는 값을 명시한다. (returning="seq")
	         => 보조 객체의 파라미터명과 returning의 파라미터명이 동일해야 한다.
	         ==> After Returnig Advice 가 사용되어지는 경우는 일반적으로
	                             주업무에서 생성된 데이터(결과값 등)를 보조업무에 넘겨서 연계해야 하는 경우에 사용되는 Advice이다.
	                단!!!!!!, 
	       Arround 와 After Returnig 을 동시에 사용하면 After Returnig 이 반환값을 받지 못하기 때문에 
	       Arround 와 After Returnig 은 동시에 사용불가하다.
	       After Returnig 을 사용하려면  Arround 는 제거되어져야 한다.           
	    -->
 	    <!-- <aop:after-returning method="afterreturning" pointcut-ref="m1" returning="seq" /> -->
 	    
 	    <!-- After Throwing Advice 적용   
 	         => 주업무에서 예외가 발생하면 실행되는 보조업무
 	         => 보조객체의 인자명(파라미터명)과 throwing의 인자명(파라미터명)은 동일해야 한다.
 	    -->
 	    <aop:after-throwing method="afterthrowing" pointcut-ref="m1" throwing="e"/>
 	    
	</aop:aspect>	
</aop:config>

</beans>