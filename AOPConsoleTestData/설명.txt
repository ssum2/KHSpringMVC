*** 콘솔 프로젝트 실습하기 
	- Advice가 호출될 때 Pointcut으로부터 전달해야 하는 데이터들이 있는 경우 어떻게 전달하고 어떻게 전달받는지를 알아본다.
	- 주업무 -> (전달할 값) -> 보조업무

	a. 프로젝트 생성하기
		New > Other > Spring Legacy Project > Simple Spring Maven > "AOPConsoleTestData"
	b. pom.xml 의존 파일 설정하기
		기존 <dependency>는 모두 삭제하고 아래의 <dependency> 추가하기 
		- spring-core
		- spring-context
		- spring-aop
		- aspectjweave
	c. 파일 생성하기
		- 파일을 생성하고 코드를 작성
		1. src/main/java > com.test.pointcut > ICore 인터페이스 생성
		2. src/main/java > com.test.pointcut > Core 클래스 생성 (주 업무 담당, 서비스 객체)
		3. src/main/java > com.test.pointcut > MainTest 클래스 생성 (메인 클래스)
		4. src/main/java > com.test.pointcut > Cross 클래스 생성 (보조 업무 담당)
		5. src/main/resources > main.xml 생성
	d. 실행
		- MainTest.main() 실행하기

[pom.xml] - 이전 프로젝트와 동일

<dependencies>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>4.3.1.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>4.0.4.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aop</artifactId>
		<version>4.0.4.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjweaver</artifactId>
		<version>1.7.4</version>
	</dependency>
</dependencies>	


[ICore.java]

public interface ICore {

	//주업무
	void m1();

}


[Core.java]

public class Core implements ICore {

	@Override //주업무
	public void m1() {

		System.out.println("주업무");	

	}
	
}


[Cross.java]

@Aspect
public class Cross {

	//아직 보조업무 미구현
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		ApplicationContext context = new GenericXmlApplicationContext("classpath:main.xml");

		ICore core = context.getBean("core", ICore.class);
		
		core.m1();

	}
	
}


[main.xml]

<aop:aspectj-autoproxy />	

<bean id="core" class="com.test.pointcut.Core"/>

<bean id="cross" class="com.test.pointcut.Cross"/>


{실행결과}

주업무

>>>>>>일단 보조업무없이 주업무만 동작되는 기본 틀을 구현했다.


	e. 모든 Advice는 JoinPoint라는 프록시 객체를 인자로 전달받는다. 
		- 우선 JoinPoint 객체를 통해 얻을 수 있는 여러가지 정보에 대해서 알아본다.
		1. Cross.java 내용 추가하기

[Cross.java]

@Aspect
public class Cross {
			
	@Pointcut("execution(public void com.test.pointcut.Core.m1())")
	public void pc1() { 
	}

	@Before("pc1()")
	public void before(JoinPoint joinPoint) {
		
		System.out.println("보조업무");
		
		//주업무 객체를 반환한다.
		System.out.println(joinPoint.getTarget());
		
		//Pointcut AspectJ 형식을 반환한다.
		System.out.println(joinPoint.toLongString());
		System.out.println(joinPoint.toShortString());
		System.out.println(joinPoint.toString());
		
		//Pointcut 메소드 형식을 반환한다.
		System.out.println(joinPoint.getSignature());
		
		//인자값 리스트를 반환한다.
		System.out.println(joinPoint.getArgs());		
		
	}
	
}


{실행결과}

보조업무
com.test.pointcut.Core@6646153
execution(public abstract void com.test.pointcut.ICore.m1())
execution(ICore.m1())
execution(void com.test.pointcut.ICore.m1())
void com.test.pointcut.ICore.m1()
[Ljava.lang.Object;@3b2cf7ab
주업무

>>>>>>>더 많은 정보를 얻어올 수 있지만 일단 활용도가 높은 것들만 출력했다.


	f. e의 내용 중 getTarget()에 대해 살펴본다.
		- getTarget()은 주업무 객체를 반환하기 때문에 주업무의 여러가지 정보를 올 수 있다.
		- 이를 통해 보조업무에 다양한 적용이 가능하다.
		1. ICore.java 내용 추가하기
		2. Core.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Cross.java 내용 추가하기

[ICore.java]

public interface ICore {

	..

	//주업무 추가하기
	void m2();

}


[Core.java]

public class Core implements ICore {

	..

	public int num = 100;
	private String name = "홍길동";
	
	public String getName() {
		return name;
	}

	@Override
	public void m2() {

		System.out.println("주업무2");
		
	}
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		..

		core.m2();

	}
	
}


[Cross.java]

@Aspect
public class Cross {

	..

	@Pointcut("execution(public void com.test.pointcut.Core.m2())")
	public void pc2() { 
	}

	@Before("pc2()")
	public void before2(JoinPoint joinPoint) {
		
		//주업무 객체를 반환한다.
		Core core = (Core)joinPoint.getTarget();
		
		//주업무 객체의 멤버를 접근한다.
		System.out.println(core.num);
		System.out.println(core.getName());
		
	}
	
}


{실행결과}

100
홍길동
주업무2

>>>>>>>주업무 객체의 public 멤버를 얼마든지 접근 가능하기 때문에 이를 사용해 여러가지 보조업무를 진행할 수 있다.


	g. e의 내용 중 getArgs()에 대해 살펴본다.
		- getArgs()은 Pointcut의 파라미터값을 반환한다.
		- 주업무 객체가 실행되기 위한 인자값에 대한 정보를 보조업무 객체가 접근 가능하다는 뜻이다.
		1. ICore.java 내용 추가하기
		2. Core.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Cross.java 내용 추가하기

[ICore.java]

public interface ICore {

	..

	//주업무 추가하기
	void m3(String color, String subject);

}


[Core.java]

public class Core implements ICore {

	..

	@Override
	public void m3(String color, String subject) {
		System.out.println("주업무3");
		System.out.print("색상 : " + color);
		System.out.println(" / 과목 : " + subject);
		
	}
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		..

		core.m3("red","kor");
		core.m3("blue","eng");
		core.m3("red","math");
		core.m3(" ","science");
		core.m3("yellow","society");

	}
	
}


[Cross.java]

@Aspect
public class Cross {

	..

/*
	  모든 Advice는 JoinPoint라는 프록시 객체를 인자로 전달받는다. 
       우선 JoinPoint 객체를 통해 얻을 수 있는 여러가지 정보에 대해서 알아본다.
	  다음으로 getArgs()에 대해 살펴본다.
	  - getArgs()은 Pointcut의 인자값을 반환한다.
	  - 주업무 객체가 실행되기 위한 인자값에 대한 정보를 보조업무 객체가 접근 가능하다는 뜻이다. 
	 */
	//인자값 틀리지않게 조심!!
	@Pointcut("execution(public void com.test.pointcut.Core.m3(String , String))")
	public void pc3() { 
	}
	
	
	HashMap<String,String> mapColor = new HashMap<String, String>();
	HashMap<String,String> mapSubject = new HashMap<String, String>();

	@After("pc3()")
	public void after(JoinPoint joinPoint) {
		
		// Pointcut("m3())"의 인자값을 가져온다.
		// 즉, MainTest에서 m3()를 호출할 때 넣어준 색상명을 가져온다.
		// 3번의 호출에서 2번은 "red", 1번은 "blue"를 전달한 상태이다.
		String color = (String)joinPoint.getArgs()[0];
		
		if(color != null && !color.trim().isEmpty()) {
			
			if(color.equalsIgnoreCase("red")) 
				mapColor.put(color, "빨강");
			else if(color.equalsIgnoreCase("blue"))
				mapColor.put(color, "파랑");
			else if(color.equalsIgnoreCase("yellow"))
				mapColor.put(color, "노랑");
			else if(color.equalsIgnoreCase("green"))
				mapColor.put(color, "초록");
			else 
				mapColor.put(color, "기타색깔");
			
		}
		else {
			color = "none";
			mapColor.put(color, "색깔없음");
		}
		
		Set<String> keyset = mapColor.keySet();
		
		for(String key : keyset) {
			 System.out.println(key + "=" + mapColor.get(key));
		}
		
		
		///////////////////////////////////////////////////////////////
		
		String subject = (String)joinPoint.getArgs()[1];
		
		if(subject != null && !subject.trim().isEmpty()) {
			
			if(subject.equalsIgnoreCase("kor")) 
				mapSubject.put(subject, "국어");
			else if(subject.equalsIgnoreCase("eng"))
				mapSubject.put(subject, "영어");
			else if(subject.equalsIgnoreCase("math"))
				mapSubject.put(subject, "수학");
			else if(subject.equalsIgnoreCase("science"))
				mapSubject.put(subject, "과학");
			else if(subject.equalsIgnoreCase("society"))
				mapSubject.put(subject, "사회");
			else 
				mapSubject.put(subject, "기타과목");
		}
		else {
			subject = "none";
			mapSubject.put(subject, "과목없음");
		}
		
		keyset = mapSubject.keySet();
		
		for(String key : keyset) {
			 System.out.println(key + "=" + mapSubject.get(key));
		}
	
	} // end of after(JoinPoint joinPoint)----------------------------


{실행결과}

주업무3
색상 : red / 과목 : kor
red=빨강
kor=국어

주업무3
색상 : blue / 과목 : eng
red=빨강
blue=파랑
kor=국어
eng=영어

주업무3
색상 : red / 과목 : math
red=빨강
blue=파랑
math=수학
kor=국어
eng=영어

주업무3
색상 :   / 과목 : science
red=빨강
blue=파랑
none=색깔없음
science=과학
math=수학
kor=국어
eng=영어

주업무3
색상 : yellow / 과목 : society
red=빨강
blue=파랑
yellow=노랑
none=색깔없음
society=사회
science=과학
math=수학
kor=국어
eng=영어

>>>>>결과에서 보는 것처럼 주업무에 전달된 인자들을 보조업무에 이용할 수 있다. 
위의 결과는 m3()에 전달되는 색상의 총 횟수를 출력했다.


	h. [요약 정리] 주업무 객체에서 보조업무 객체로 무언가를 전달하려면..
		1. 주업무 객체의 public 멤버
			-> JoinPoint.getTarget() 사용
		2. 주업무 객체의 Pointcut 인자값
			-> JoinPoint.getArgs() 사용
		3. 주업무 객체의 Pointcut 내부 지역 변수값
			-> After returning Advice 사용

	i. Pointcut 명시자를 within을 사용해서 선언하기
		- within 명시자는 특정 타입에 속하는 메소드를 Pointcut으로 설정한다.
		- 타입 패턴만을 이용해서 Pointcut을 설정한다.
		- execution 명시자에 비해 덜 세밀하다.
		1. ICore.java 내용 추가하기
		2. Core.java 내용 추가하기
		3. MainTest.java 내용 추가하기
		4. Cross.java 내용 추가하기

		ex) @Pointcut("within(com.test.pointcut.Core)")
			- com.test.pointcut.Core 클래스의 모든 메소드를 Pointcut으로 선언한다.
		ex) @Pointcut("within(Core)")
			- 위의 예의 패키지 생략 표현
		ex) @Pointcut("within(com.test.pointcut.*)")
			- com.test.pointcut 패키지내의 모든 클래스의 모든 메소드를 Pointcut으로 선언한다.
		ex) @Pointcut("within(com.test...*)")
			- com.test와 그 하위 패키지내의 모든 클래스의 모든 메소드를 Pointcut으로 선언한다.

[ICore.java]

public interface ICore {

	..

	//주업무 추가하기
	void m4();

}


[Core.java]

public class Core implements ICore {

	..

	@Override
	public void m4() {
		
		System.out.println("주업무4");
		
	}
	
}


[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		..

		core.m4();

	}
	
}


[Cross.java]

@Aspect
public class Cross {

	..

	@Pointcut("within(com.test.pointcut.Core)")
	public void pc4() { 
	}

	@Before("pc4()")
	public void before4() {
		
		System.out.println("보조업무4");
		
	}
	
}


{실행결과}

보조업무4
주업무4

>>>>>> execution 명시자는 Pointcut을 세밀하게 제어하고 싶을때, 
within 명시자는 Pointcut을 편하게 제어하고(클래스 or 패키지 단위로) 싶을때 사용한다.


	j. Pointcut 명시자를 bean을 사용해서 선언하기
		- baen 명시자는 빈 이름의 패턴을 사용해서 Pointcut을 설정한다.
		- Spring에서만 사용 가능한 명시자이다. (AspectJ에는 없다.)
		1. MainTest.java 내용 확인하기
		2. Cross.java 내용 추가하기
		3. main.xml  내용 확인하기

		ex) @Pointcut("bean(core)")
			- 빈 이름이 "core"인 클래스의 모든 메소드를 Pointcut으로 선언한다.
		ex) @Pointcut("bean(c*)")
			- 빈 이름이 "c"로 시작하는 모든 클래스의 모든 메소드를 Pointcut으로 선언한다.
		ex) @Pointcut("bean(*c)")
			- 빈 이름이 "c"로 끝나는 모든 클래스의 모든 메소드를 Pointcut으로 선언한다.

[MainTest.java]

public class MainTest {

	public static void main(String[] args) {

		..

		core.m4(); //위의 나머지 업무는 주석처리

	}
	
}


[main.xml]

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<aop:aspectj-autoproxy />
		
	<bean id="core" class="com.test.pointcut.Core"/>

	<bean id="cross" class="com.test.pointcut.Cross"/>

</beans>	


[Cross.java]

@Aspect
public class Cross {

	..

	@Pointcut("bean(core)")
	public void pc5() { 
	}

	@Before("pc5()")
	public void before5() {
		
		System.out.println("보조업무5");
		
	}
	
}


{실행결과}

보조업무5
주업무4

>>>>>동일한 클래스로 자바 빈을 여러 용도로 만들어서 사용할 때 (<bean id="my" class="com.test.Use">, <bean id="he" class="com.test.Use">, <bean id="she" class="com.test.Use">) 이 중 특정 빈(my)만을 Pointcut을 선언한다고 가정하면.. execution 명시자와 within 명시자로는 불가능하지만 bean 명시자로는 가능하다.